plot(mean_tpt_ss,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone  Erfahrung", ylab= "Zeit in Millisekunden", xlab = "Aufgaben", ylim=c(1500,5100))
lines(mean_tpt_s, type= "l", col = "blue")
lines(mean_tpt_m, type= "l", col = "red")
lines(mean_tpt_u, type= "l", col = "yellow")
lines(mean_tpt_su, type= "l", col = "green")
#Sekunden
plot(mean_tptr_ss,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone Erfahrung", ylab= "Zeit in Sekunden", xlab = "Aufgaben", ylim=c(1.5,5.1))
lines(mean_tptr_s, type= "l", col = "blue")
lines(mean_tptr_m, type= "l", col = "red")
lines(mean_tptr_u, type= "l", col = "yellow")
lines(mean_tptr_su, type= "l", col = "green")
#Millisekunden
plot(mean_tpt_mo,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Uhrzeit", ylab= "Zeit in Millisekunden", xlab = "Aufgaben", ylim=c(1500,5100))
lines(mean_tpt_a, type= "l", col = "blue")
lines(mean_tpt_n, type= "l", col = "red")
lines(mean_tpt_e, type= "l", col = "yellow")
#Sekunden
plot(mean_tptr_mo,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Uhrzeit", ylab= "Zeit in Sekunden", xlab = "Aufgaben", ylim=c(1.5,5.1))
lines(mean_tptr_a, type= "l", col = "blue")
lines(mean_tptr_n, type= "l", col = "red")
lines(mean_tptr_e, type= "l", col = "yellow")
save.image("~/Documents/GitHub/mef/MEF/2021_07_16.RData")
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("subsets_erstellen.R")
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
plot(mean_tpt,type= "l", main = "Durschnittliche Dauer der Aufgaben", ylab= "Zeit in Millisekunden", xlab = "Aufgaben")
plot(mean_tptr,type= "l", main = "Durschnittliche Dauer der Aufgaben", ylab= "Zeit in Sekunden", xlab = "Aufgaben")
#Millisekunden
plot(mean_tpt_f,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Geschlechtern", ylab= "Zeit in Millisekunden", xlab = "Aufgaben")
lines(mean_tpt_m, type= "l", col = "blue")
#Sekunden
plot(mean_tptr_f,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Geschlechtern", ylab= "Zeit in Sekunden", xlab = "Aufgaben")
lines(mean_tptr_m, type= "l", col = "blue")
#Millisekunden
plot(mean_tpt_1120,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Altersgruppen", ylab= "Zeit in Millisekunden", xlab = "Aufgaben")
lines(mean_tpt_2130, type= "l", col = "green")
lines(mean_tpt_3140, type= "l", col = "red")
lines(mean_tpt_4150, type= "l", col = "yellow")
lines(mean_tpt_5160, type= "l", col = "orange")
lines(mean_tpt_60, type= "l", col = "grey")
#Sekunden
plot(mean_tptr_1120,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Altersgruppen", ylab= "Zeit in Sekunden", xlab = "Aufgaben")
lines(mean_tptr_2130, type= "l", col = "green")
lines(mean_tptr_3140, type= "l", col = "red")
lines(mean_tptr_4150, type= "l", col = "yellow")
lines(mean_tptr_5160, type= "l", col = "orange")
lines(mean_tptr_60, type= "l", col = "blue")
#Millisekunden
plot(mean_tpt_iOS,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Betriebssystem", ylab= "Zeit in Millisekunden", xlab = "Aufgaben")
lines(mean_tpt_Android, type= "l", col = "blue")
#Sekunden
plot(mean_tptr_iOS,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Betriebssystem", ylab= "Zeit in Sekunden", xlab = "Aufgaben")
lines(mean_tptr_Android, type= "l", col = "blue")
#Millisekunden
plot(mean_tpt_mt,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone Nutzung", ylab= "Zeit in Millisekunden", xlab = "Aufgaben", ylim=c(1500,5100))
lines(mean_tpt_t, type= "l", col = "blue")
#lines(mean_tpt_mw, type= "l", col = "rot")
#Sekunden
plot(mean_tptr_mt,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone Nutzung", ylab= "Zeit in Sekunden", xlab = "Aufgaben", ylim=c(1.5,5.1))
lines(mean_tptr_t, type= "l", col = "blue")
#lines(mean_tptr_mw, type= "l", col = "rot")
#Millisekunden
plot(mean_tpt_ss,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone  Erfahrung", ylab= "Zeit in Millisekunden", xlab = "Aufgaben", ylim=c(1500,5100))
lines(mean_tpt_s, type= "l", col = "blue")
lines(mean_tpt_m, type= "l", col = "red")
lines(mean_tpt_u, type= "l", col = "yellow")
lines(mean_tpt_su, type= "l", col = "green")
#Sekunden
plot(mean_tptr_ss,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Smartphone Erfahrung", ylab= "Zeit in Sekunden", xlab = "Aufgaben", ylim=c(1.5,5.1))
lines(mean_tptr_s, type= "l", col = "blue")
lines(mean_tptr_m, type= "l", col = "red")
lines(mean_tptr_u, type= "l", col = "yellow")
lines(mean_tptr_su, type= "l", col = "green")
#Millisekunden
plot(mean_tpt_mo,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Uhrzeit", ylab= "Zeit in Millisekunden", xlab = "Aufgaben", ylim=c(1500,5100))
lines(mean_tpt_a, type= "l", col = "blue")
lines(mean_tpt_n, type= "l", col = "red")
lines(mean_tpt_e, type= "l", col = "yellow")
#Sekunden
plot(mean_tptr_mo,type= "l", main = "Durschnittliche Dauer der Aufgaben nach Uhrzeit", ylab= "Zeit in Sekunden", xlab = "Aufgaben", ylim=c(1.5,5.1))
lines(mean_tptr_a, type= "l", col = "blue")
lines(mean_tptr_n, type= "l", col = "red")
lines(mean_tptr_e, type= "l", col = "yellow")
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("util.R")
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
knitr::opts_chunk$set(echo = TRUE)
create.histogram.percent(data_ishiharaclean, ~Geschlecht, "Geschlechterverteilung")
create.histogram.percent(data_ishiharaclean, ~OS, "Verteilung Betriebssystem")
create.histogram.percent(data_ishiharaclean, ~Alter, "Altersverteilung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzung', "Smartphone Nutzung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzungserfahrung', "Smartphone Nutzungserfahrung")
data_ic_m <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'm')
data_ic_f <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'f')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Falsch`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Falsch`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl falsch beantworteter Aufgaben"),
title = "Verteilung falscher Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
data_ic_iOS <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'iOS')
data_ic_Android <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'Android')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_iOS$`Richtig`, name= "iOS")
fig <- fig %>% add_trace(y = data_ic_Android$`Richtig`, name="Android")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Betriebssystem"
)
fig
data_time_config <- data_ishiharaclean
data_time_config <-data_time_config %>% select(-("Datum":"Ishihara Dauer"))
data_time_config_long <- data_time_config %>%
# add row numbers as we need them to keep the order
dplyr::mutate(rn = dplyr::row_number()) %>%
# gather is depricated
tidyr::pivot_longer(-rn, names_to = "colu", values_to = "vals") %>%
# extract number from the column names that now are a column as we need them to keep the order also
dplyr::mutate(nr = readr::parse_number(colu))
data_time_config_long <- data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "Z")) %>%
dplyr::left_join(data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "R")), by = c("rn", "nr")) %>%
# order to get the exact output you are looking for
dplyr::arrange(nr) %>%
# select and rename to get exactout put you a looking vor
dplyr::select(Z = colu.x, `Time in ms` = vals.x, R = colu.y, Reaction = vals.y)
knitr::kable(head(data_time_config_long))
data_time_config_1 <- subset(data_time_config_long, data_time_config_long$Reaction == 1)
data_time_config_2 <- subset(data_time_config_long, data_time_config_long$Reaction == 2)
data_time_config_3 <- subset(data_time_config_long, data_time_config_long$Reaction == 3)
data_time_config_4 <- subset(data_time_config_long, data_time_config_long$Reaction == 4)
data_time_config_5 <- subset(data_time_config_long, data_time_config_long$Reaction == 5)
data_time_config_6 <- subset(data_time_config_long, data_time_config_long$Reaction == 6)
data_time_config_7 <- subset(data_time_config_long, data_time_config_long$Reaction == 7)
data_time_config_8 <- subset(data_time_config_long, data_time_config_long$Reaction == 8)
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_time_config_1$`Time in ms`, name="1")
fig <- fig %>% add_trace(y = data_time_config_2$`Time in ms`, name="2")
fig <- fig %>% add_trace(y = data_time_config_3$`Time in ms`, name="3")
fig <- fig %>% add_trace(y = data_time_config_4$`Time in ms`, name="4")
fig <- fig %>% add_trace(y = data_time_config_5$`Time in ms`, name="5")
fig <- fig %>% add_trace(y = data_time_config_6$`Time in ms`, name="6")
fig <- fig %>% add_trace(y = data_time_config_7$`Time in ms`, name="7")
fig <- fig %>% add_trace(y = data_time_config_8$`Time in ms`, name="8")
fig <- fig %>% layout(
yaxis = list(title= "Zeit in ms"),
title = "Boxplots"
)
fig
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
summary(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
source("Skripte/util.R")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
#Filenamen anpassen
Daten_orig <- read_csv("Daten/Daten_n121.csv",
col_types = cols(Datum = col_date(format = "%d.%m.%Y"),
Uhrzeit = col_time(format = "%H:%M"),
Geschlecht = col_factor(levels = c("f",
"m")), Alter = col_factor(levels = c("unter 11",
"11-20", "21-30", "31-40", "41-50",
"51-60", "über 60")), OS = col_factor(levels = c("iOS",
"Android")), `Smartphone Nutzung` = col_factor(levels = c("mehrmals täglich",
"täglich", "mehrmals die Woche")),
`Smartphone Nutzungserfahrung` = col_factor(levels = c("sehr sicher",
"sicher", "mittelmäßig", "unsicher",
"sehr unsicher")), `Zeit gesamt` = col_time(format = "%H:%M:%OS")))
data <- Daten_orig
#View(data)
data_ishiharaclean <-subset(data, data$`Ishihara 3` == 3 & data$`Ishihara 42` == 42 & data$`Ishihara Linien`== 'keine')
create.histogram.percent(data_ishiharaclean, ~Geschlecht, "Geschlechterverteilung")
create.histogram.percent(data_ishiharaclean, ~OS, "Verteilung Betriebssystem")
create.histogram.percent(data_ishiharaclean, ~Alter, "Altersverteilung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzung', "Smartphone Nutzung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzungserfahrung', "Smartphone Nutzungserfahrung")
data_ic_m <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'm')
data_ic_f <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'f')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Falsch`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Falsch`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl falsch beantworteter Aufgaben"),
title = "Verteilung falscher Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
data_ic_iOS <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'iOS')
data_ic_Android <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'Android')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_iOS$`Richtig`, name= "iOS")
fig <- fig %>% add_trace(y = data_ic_Android$`Richtig`, name="Android")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Betriebssystem"
)
fig
data_time_config <- data_ishiharaclean
data_time_config <-data_time_config %>% select(-("Datum":"Ishihara Dauer"))
data_time_config_long <- data_time_config %>%
# add row numbers as we need them to keep the order
dplyr::mutate(rn = dplyr::row_number()) %>%
# gather is depricated
tidyr::pivot_longer(-rn, names_to = "colu", values_to = "vals") %>%
# extract number from the column names that now are a column as we need them to keep the order also
dplyr::mutate(nr = readr::parse_number(colu))
data_time_config_long <- data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "Z")) %>%
dplyr::left_join(data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "R")), by = c("rn", "nr")) %>%
# order to get the exact output you are looking for
dplyr::arrange(nr) %>%
# select and rename to get exactout put you a looking vor
dplyr::select(Z = colu.x, `Time in ms` = vals.x, R = colu.y, Reaction = vals.y)
knitr::kable(head(data_time_config_long))
data_time_config_1 <- subset(data_time_config_long, data_time_config_long$Reaction == 1)
data_time_config_2 <- subset(data_time_config_long, data_time_config_long$Reaction == 2)
data_time_config_3 <- subset(data_time_config_long, data_time_config_long$Reaction == 3)
data_time_config_4 <- subset(data_time_config_long, data_time_config_long$Reaction == 4)
data_time_config_5 <- subset(data_time_config_long, data_time_config_long$Reaction == 5)
data_time_config_6 <- subset(data_time_config_long, data_time_config_long$Reaction == 6)
data_time_config_7 <- subset(data_time_config_long, data_time_config_long$Reaction == 7)
data_time_config_8 <- subset(data_time_config_long, data_time_config_long$Reaction == 8)
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_time_config_1$`Time in ms`, name="1")
fig <- fig %>% add_trace(y = data_time_config_2$`Time in ms`, name="2")
fig <- fig %>% add_trace(y = data_time_config_3$`Time in ms`, name="3")
fig <- fig %>% add_trace(y = data_time_config_4$`Time in ms`, name="4")
fig <- fig %>% add_trace(y = data_time_config_5$`Time in ms`, name="5")
fig <- fig %>% add_trace(y = data_time_config_6$`Time in ms`, name="6")
fig <- fig %>% add_trace(y = data_time_config_7$`Time in ms`, name="7")
fig <- fig %>% add_trace(y = data_time_config_8$`Time in ms`, name="8")
fig <- fig %>% layout(
yaxis = list(title= "Zeit in ms"),
title = "Boxplots"
)
fig
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
plot(data$Geschlecht, main = "Biologisches Geschlecht", ylab= "Anzahl Personen", ylim=c(0,100))
plot(data_ishiharaclean$Geschlecht, main = "Biologisches Geschlecht ohne Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,100))
plot(data_ishiharafalse$Geschlecht, main = "Biologisches Geschlecht mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,25))
plot(data$Alter, main = "Alter", ylab= "Anzahl Personen", ylim=c(0,75))
plot(data_ishiharaclean$Alter, main = "Alter ohne Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,60))
plot(data_ishiharafalse$Alter, main = "Alter mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,15))
plot(data$OS, main = "Betriebssystem", ylab= "Anzahl Personen", ylim=c(0,80))
plot(data_ishiharaclean$OS, main = "Betriebssystem bereinigt", ylab= "Anzahl Personen", ylim=c(0,80))
plot(data_ishiharafalse$OS, main = "Betriebssystem mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,15))
plot(data$'Smartphone Nutzung', main = "Smartphone Nutzungshäufigkeit", ylab= "Anzahl Personen", ylim=c(0,110))
plot(data_ishiharaclean$'Smartphone Nutzung', main = "Smartphone Nutzungshäufigkeit bereinigt", ylab= "Anzahl Personen", ylim=c(0,110))
plot(data_ishiharafalse$'Smartphone Nutzung', main = "Smartphone Nutzungshäufigkeit mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,20))
plot(data$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung", ylab= "Anzahl Personen", ylim=c(0,70))
plot(data_ishiharaclean$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung bereinigt", ylab= "Anzahl Personen", ylim=c(0,70))
plot(data_ishiharafalse$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,15))
plot(data$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung", ylab= "Anzahl Personen", ylim=c(0,70))
plot(data_ishiharaclean$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung bereinigt", ylab= "Anzahl Personen", ylim=c(0,70))
plot(data_ishiharafalse$'Smartphone Nutzungserfahrung', main = "Smartphone Nutzungserfahrung mit Farbfehlsichtigkeit", ylab= "Anzahl Personen", ylim=c(0,15))
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
summary(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
knitr::opts_chunk$set(echo = TRUE)
#source("Skripte/import.R")
#source("Skripte/subsets_erstellen.R")
#source("Skripte/all_tpt.R")
#source("Skripte/util.R")
summary(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
knitr::opts_chunk$set(echo = TRUE)
create.histogram.percent(data_ishiharaclean, ~Geschlecht, "Geschlechterverteilung")
create.histogram.percent(data_ishiharaclean, ~OS, "Verteilung Betriebssystem")
create.histogram.percent(data_ishiharaclean, ~Alter, "Altersverteilung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzung', "Smartphone Nutzung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzungserfahrung', "Smartphone Nutzungserfahrung")
data_ic_m <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'm')
data_ic_f <-subset(data_ishiharaclean, data_ishiharaclean$'Geschlecht' == 'f')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Falsch`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Falsch`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl falsch beantworteter Aufgaben"),
title = "Verteilung falscher Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
data_ic_iOS <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'iOS')
data_ic_Android <-subset(data_ishiharaclean, data_ishiharaclean$'OS' == 'Android')
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_iOS$`Richtig`, name= "iOS")
fig <- fig %>% add_trace(y = data_ic_Android$`Richtig`, name="Android")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Betriebssystem"
)
fig
data_time_config <- data_ishiharaclean
data_time_config <-data_time_config %>% select(-("Datum":"Ishihara Dauer"))
data_time_config_long <- data_time_config %>%
# add row numbers as we need them to keep the order
dplyr::mutate(rn = dplyr::row_number()) %>%
# gather is depricated
tidyr::pivot_longer(-rn, names_to = "colu", values_to = "vals") %>%
# extract number from the column names that now are a column as we need them to keep the order also
dplyr::mutate(nr = readr::parse_number(colu))
data_time_config_long <- data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "Z")) %>%
dplyr::left_join(data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "R")), by = c("rn", "nr")) %>%
# order to get the exact output you are looking for
dplyr::arrange(nr) %>%
# select and rename to get exactout put you a looking vor
dplyr::select(Z = colu.x, `Time in ms` = vals.x, R = colu.y, Reaction = vals.y)
knitr::kable(head(data_time_config_long))
data_time_config_1 <- subset(data_time_config_long, data_time_config_long$Reaction == 1)
data_time_config_2 <- subset(data_time_config_long, data_time_config_long$Reaction == 2)
data_time_config_3 <- subset(data_time_config_long, data_time_config_long$Reaction == 3)
data_time_config_4 <- subset(data_time_config_long, data_time_config_long$Reaction == 4)
data_time_config_5 <- subset(data_time_config_long, data_time_config_long$Reaction == 5)
data_time_config_6 <- subset(data_time_config_long, data_time_config_long$Reaction == 6)
data_time_config_7 <- subset(data_time_config_long, data_time_config_long$Reaction == 7)
data_time_config_8 <- subset(data_time_config_long, data_time_config_long$Reaction == 8)
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_time_config_1$`Time in ms`, name="1")
fig <- fig %>% add_trace(y = data_time_config_2$`Time in ms`, name="2")
fig <- fig %>% add_trace(y = data_time_config_3$`Time in ms`, name="3")
fig <- fig %>% add_trace(y = data_time_config_4$`Time in ms`, name="4")
fig <- fig %>% add_trace(y = data_time_config_5$`Time in ms`, name="5")
fig <- fig %>% add_trace(y = data_time_config_6$`Time in ms`, name="6")
fig <- fig %>% add_trace(y = data_time_config_7$`Time in ms`, name="7")
fig <- fig %>% add_trace(y = data_time_config_8$`Time in ms`, name="8")
fig <- fig %>% layout(
yaxis = list(title= "Zeit in ms"),
title = "Boxplots"
)
fig
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
knitr::opts_chunk$set(echo = TRUE)
create.histogram.percent(data_ishiharaclean, ~Geschlecht, "Geschlechterverteilung")
create.histogram.percent(data_ishiharaclean, ~OS, "Verteilung Betriebssystem")
create.histogram.percent(data_ishiharaclean, ~Alter, "Altersverteilung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzung', "Smartphone Nutzung")
create.histogram.percent(data_ishiharaclean, data_ishiharaclean$'Smartphone Nutzungserfahrung', "Smartphone Nutzungserfahrung")
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Falsch`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Falsch`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl falsch beantworteter Aufgaben"),
title = "Verteilung falscher Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_m$`Richtig`, name= "m")
fig <- fig %>% add_trace(y = data_ic_f$`Richtig`, name="w")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Geschlecht"
)
fig
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_ic_iOS$`Richtig`, name= "iOS")
fig <- fig %>% add_trace(y = data_ic_Android$`Richtig`, name="Android")
fig <- fig %>% layout(
yaxis = list(title= "Anzahl richtig beantworteter Aufgaben"),
title = "Verteilung richtiger Aufgaben nach Betriebssystem"
)
fig
data_time_config <- data_ishiharaclean
data_time_config <-data_time_config %>% select(-("Datum":"Ishihara Dauer"))
data_time_config_long <- data_time_config %>%
# add row numbers as we need them to keep the order
dplyr::mutate(rn = dplyr::row_number()) %>%
# gather is depricated
tidyr::pivot_longer(-rn, names_to = "colu", values_to = "vals") %>%
# extract number from the column names that now are a column as we need them to keep the order also
dplyr::mutate(nr = readr::parse_number(colu))
data_time_config_long <- data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "Z")) %>%
dplyr::left_join(data_time_config_long %>%
dplyr::filter(stringr::str_detect(colu, "R")), by = c("rn", "nr")) %>%
# order to get the exact output you are looking for
dplyr::arrange(nr) %>%
# select and rename to get exactout put you a looking vor
dplyr::select(Z = colu.x, `Time in ms` = vals.x, R = colu.y, Reaction = vals.y)
knitr::kable(head(data_time_config_long))
data_time_config_1 <- subset(data_time_config_long, data_time_config_long$Reaction == 1)
data_time_config_2 <- subset(data_time_config_long, data_time_config_long$Reaction == 2)
data_time_config_3 <- subset(data_time_config_long, data_time_config_long$Reaction == 3)
data_time_config_4 <- subset(data_time_config_long, data_time_config_long$Reaction == 4)
data_time_config_5 <- subset(data_time_config_long, data_time_config_long$Reaction == 5)
data_time_config_6 <- subset(data_time_config_long, data_time_config_long$Reaction == 6)
data_time_config_7 <- subset(data_time_config_long, data_time_config_long$Reaction == 7)
data_time_config_8 <- subset(data_time_config_long, data_time_config_long$Reaction == 8)
fig <- plot_ly(type = "box")
fig <- fig %>% add_trace(y = data_time_config_1$`Time in ms`, name="1")
fig <- fig %>% add_trace(y = data_time_config_2$`Time in ms`, name="2")
fig <- fig %>% add_trace(y = data_time_config_3$`Time in ms`, name="3")
fig <- fig %>% add_trace(y = data_time_config_4$`Time in ms`, name="4")
fig <- fig %>% add_trace(y = data_time_config_5$`Time in ms`, name="5")
fig <- fig %>% add_trace(y = data_time_config_6$`Time in ms`, name="6")
fig <- fig %>% add_trace(y = data_time_config_7$`Time in ms`, name="7")
fig <- fig %>% add_trace(y = data_time_config_8$`Time in ms`, name="8")
fig <- fig %>% layout(
yaxis = list(title= "Zeit in ms"),
title = "Boxplots"
)
fig
save.image("~/Documents/GitHub/mef/MEF/2021_07_16.RData")
knitr::opts_chunk$set(echo = TRUE)
#source("Skripte/import.R")
#source("Skripte/subsets_erstellen.R")
#source("Skripte/all_tpt.R")
#source("Skripte/util.R")
summary(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
knitr::opts_chunk$set(echo = TRUE)
source("Skripte/import.R")
source("Skripte/subsets_erstellen.R")
source("Skripte/all_tpt.R")
source("Skripte/util.R")
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "1"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "2"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "3"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "4"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "5"])
#shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "6"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "7"])
shapiro.test(data_time_config_long$`Time in ms`[data_time_config_long$Reaction == "8"])
summary(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
data_time_config_long$Reaction <- as.factor(data_time_config_long$Reaction)
TukeyHSD(aov(data_time_config_long$`Time in ms` ~ data_time_config_long$Reaction))
